//                                         Пример задачи на «8»-«9»
//  Создать иерархию классов:
//                                                   Фильм
//                                                  /     \
//                                            Сериал       Боевик
//  Класс «Фильм» должен быть абстрактным и содержать следующие элементы: 
//      поле название, поле фамилия режиссера, поле жанр(сериал, боевик, комедия и т.д.), 
//      конструктор с параметрами, свойства для чтения полей класса, абстрактный метод для определения затрат на съемки фильма.
//  Класс сериалов должен содержать дополнительные поля - количество серий, затраты на съемку одной серии, 
//      конструктор с параметрами, реализацию метода  для получения затрат на съемку фильма, 
//      свойство для чтения количества серий, операции true и false (сериал истинный, если у него больше трех серий).
//  Класс боевиков должен содержать дополнительное поле-фамилия постановщика трюков, затраты на каждую серию(массив), 
//      затраты на постановку трюков, конструктор с параметрами, свойства для чтения полей класса, 
//      реализацию метода для получения затрат на съемку фильма, метод с переменным числом параметров, возвращающий
//      затраты за указанные серии(например, zatraty(0,2) – затраты за 1-ю и 2-ю серию, zatraty(1) – затраты за 1-ю серию и т.д.).
//  Создать параметризованную коллекцию(generic) с необходимой функциональностью. 
//  Создать в этом классе метод для поиска информации по заданному критерию(критерий передавать через параметр-делегат: 
//      стандартный или созданный). Предусмотреть метод для сериализации объектов с выбранной информацией в формате SOAP.
//  Разработать консольное приложение на языке С#, которое выполняет следующие действия:
//      –	считывает из текстового файла данные о фильмах и создает объект- коллекцию; 
//      –	выводит на экран всю информацию в виде: 
//      ╔══════════════════╦══════════╦══════╦═════════════════════════════╗
//      ║      Название    ║ Режиссер ║ жанр ║   Дополнительные сведения   ║
//      ╠══════════════════╬══════════╬══════╬═════════════════════════════╣
//      ║Крепкий орешек    ║Билл Гейтс║боевик║Постановщик трюков: Джорж Буш║
//      ║Не родись красивой║Пупкин    ║сериал║          200 серий          ║
//      ╚══════════════════╩══════════╩══════╩═════════════════════════════╝
//      –	определяет суммарные затраты на съемку сериалов, в которых больше трех серий;
//      –	выводит на экран информацию о боевиках заданного режиссера с затратами за указанные серии;
//      –	сортирует информацию по возрастанию затрат с использованием класса, реализующего интерфейс IComparer;
//      –	сериализует объекты  с информацией  о сериалах в формате  SOAP;

using HW11.Collection;
using HW11.FilmClasses;
using HW11.Tables;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace HW11
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                FilmCollection<Film> filmCollection = new FilmCollection<Film>();
                Table[] table = {
                    new TableByTask("", new Table.Column("№", 3), new Table.Column("Название", 25),
                        new Table.Column("Режиссер", 15), new Table.Column("Жанр", 15), new Table.Column("Дополнительные сведения",45)),
                    new TableActionMovies("", new Table.Column("№", 3), new Table.Column("Название", 25), new Table.Column("Режиссер", 15),
                         new Table.Column("Жанр", 15), new Table.Column("Указанные серии"), new Table.Column("Затраты",32)),
                    new TableByCost ("", new Table.Column("№", 3), new Table.Column("Название", 25), new Table.Column("Режиссер", 15),
                         new Table.Column("Жанр", 15), new Table.Column("Затраты",32))
                };
                string[] menuItems = {
                    "Считать данные о фильмах",
                    "Вывод информации на экран",
                    "Суммарные затраты на съемку сериалов, в которых больше трех серий",
                    "Вывод на экран информации о боевиках заданного режиссера с затратами за указанные серии",
                    "Сортировка информации по возрастанию затрат",
                    "Сериализация объектов с информацией о сериалах в формате SOAP"
                };
                Menu menu = new Menu(ref menuItems, ref filmCollection, ref table);
                menu.Show();
            }
            catch (InvalidCastException ex)
            {
                Console.WriteLine("Ошибка! Задан неправильный формат таблицы!\n" + ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
